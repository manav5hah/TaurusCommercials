{"ast":null,"code":"import { debounce, memo, notUndefined, approxEqual } from \"./utils.js\";\nconst defaultKeyExtractor = index => index;\nconst defaultRangeExtractor = range => {\n  const start = Math.max(range.startIndex - range.overscan, 0);\n  const end = Math.min(range.endIndex + range.overscan, range.count - 1);\n  const arr = [];\n  for (let i = start; i <= end; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\nconst observeElementRect = (instance, cb) => {\n  const element = instance.scrollElement;\n  if (!element) {\n    return;\n  }\n  const targetWindow = instance.targetWindow;\n  if (!targetWindow) {\n    return;\n  }\n  const handler = rect => {\n    const {\n      width,\n      height\n    } = rect;\n    cb({\n      width: Math.round(width),\n      height: Math.round(height)\n    });\n  };\n  handler(element.getBoundingClientRect());\n  if (!targetWindow.ResizeObserver) {\n    return () => {};\n  }\n  const observer = new targetWindow.ResizeObserver(entries => {\n    const entry = entries[0];\n    if (entry == null ? void 0 : entry.borderBoxSize) {\n      const box = entry.borderBoxSize[0];\n      if (box) {\n        handler({\n          width: box.inlineSize,\n          height: box.blockSize\n        });\n        return;\n      }\n    }\n    handler(element.getBoundingClientRect());\n  });\n  observer.observe(element, {\n    box: \"border-box\"\n  });\n  return () => {\n    observer.unobserve(element);\n  };\n};\nconst addEventListenerOptions = {\n  passive: true\n};\nconst observeWindowRect = (instance, cb) => {\n  const element = instance.scrollElement;\n  if (!element) {\n    return;\n  }\n  const handler = () => {\n    cb({\n      width: element.innerWidth,\n      height: element.innerHeight\n    });\n  };\n  handler();\n  element.addEventListener(\"resize\", handler, addEventListenerOptions);\n  return () => {\n    element.removeEventListener(\"resize\", handler);\n  };\n};\nconst supportsScrollend = typeof window == \"undefined\" ? true : \"onscrollend\" in window;\nconst observeElementOffset = (instance, cb) => {\n  const element = instance.scrollElement;\n  if (!element) {\n    return;\n  }\n  const targetWindow = instance.targetWindow;\n  if (!targetWindow) {\n    return;\n  }\n  let offset = 0;\n  const fallback = supportsScrollend ? () => void 0 : debounce(targetWindow, () => {\n    cb(offset, false);\n  }, instance.options.isScrollingResetDelay);\n  const createHandler = isScrolling => () => {\n    offset = element[instance.options.horizontal ? \"scrollLeft\" : \"scrollTop\"];\n    fallback();\n    cb(offset, isScrolling);\n  };\n  const handler = createHandler(true);\n  const endHandler = createHandler(false);\n  endHandler();\n  element.addEventListener(\"scroll\", handler, addEventListenerOptions);\n  element.addEventListener(\"scrollend\", endHandler, addEventListenerOptions);\n  return () => {\n    element.removeEventListener(\"scroll\", handler);\n    element.removeEventListener(\"scrollend\", endHandler);\n  };\n};\nconst observeWindowOffset = (instance, cb) => {\n  const element = instance.scrollElement;\n  if (!element) {\n    return;\n  }\n  const targetWindow = instance.targetWindow;\n  if (!targetWindow) {\n    return;\n  }\n  let offset = 0;\n  const fallback = supportsScrollend ? () => void 0 : debounce(targetWindow, () => {\n    cb(offset, false);\n  }, instance.options.isScrollingResetDelay);\n  const createHandler = isScrolling => () => {\n    offset = element[instance.options.horizontal ? \"scrollX\" : \"scrollY\"];\n    fallback();\n    cb(offset, isScrolling);\n  };\n  const handler = createHandler(true);\n  const endHandler = createHandler(false);\n  endHandler();\n  element.addEventListener(\"scroll\", handler, addEventListenerOptions);\n  element.addEventListener(\"scrollend\", endHandler, addEventListenerOptions);\n  return () => {\n    element.removeEventListener(\"scroll\", handler);\n    element.removeEventListener(\"scrollend\", endHandler);\n  };\n};\nconst measureElement = (element, entry, instance) => {\n  if (entry == null ? void 0 : entry.borderBoxSize) {\n    const box = entry.borderBoxSize[0];\n    if (box) {\n      const size = Math.round(box[instance.options.horizontal ? \"inlineSize\" : \"blockSize\"]);\n      return size;\n    }\n  }\n  return Math.round(element.getBoundingClientRect()[instance.options.horizontal ? \"width\" : \"height\"]);\n};\nconst windowScroll = (offset, _ref, instance) => {\n  let {\n    adjustments = 0,\n    behavior\n  } = _ref;\n  var _a, _b;\n  const toOffset = offset + adjustments;\n  (_b = (_a = instance.scrollElement) == null ? void 0 : _a.scrollTo) == null ? void 0 : _b.call(_a, {\n    [instance.options.horizontal ? \"left\" : \"top\"]: toOffset,\n    behavior\n  });\n};\nconst elementScroll = (offset, _ref2, instance) => {\n  let {\n    adjustments = 0,\n    behavior\n  } = _ref2;\n  var _a, _b;\n  const toOffset = offset + adjustments;\n  (_b = (_a = instance.scrollElement) == null ? void 0 : _a.scrollTo) == null ? void 0 : _b.call(_a, {\n    [instance.options.horizontal ? \"left\" : \"top\"]: toOffset,\n    behavior\n  });\n};\nclass Virtualizer {\n  constructor(opts) {\n    var _this = this;\n    this.unsubs = [];\n    this.scrollElement = null;\n    this.targetWindow = null;\n    this.isScrolling = false;\n    this.scrollToIndexTimeoutId = null;\n    this.measurementsCache = [];\n    this.itemSizeCache = /* @__PURE__ */new Map();\n    this.pendingMeasuredCacheIndexes = [];\n    this.scrollRect = null;\n    this.scrollOffset = null;\n    this.scrollDirection = null;\n    this.scrollAdjustments = 0;\n    this.elementsCache = /* @__PURE__ */new Map();\n    this.observer = /* @__PURE__ */(() => {\n      let _ro = null;\n      const get = () => {\n        if (_ro) {\n          return _ro;\n        }\n        if (!this.targetWindow || !this.targetWindow.ResizeObserver) {\n          return null;\n        }\n        return _ro = new this.targetWindow.ResizeObserver(entries => {\n          entries.forEach(entry => {\n            this._measureElement(entry.target, entry);\n          });\n        });\n      };\n      return {\n        disconnect: () => {\n          var _a;\n          return (_a = get()) == null ? void 0 : _a.disconnect();\n        },\n        observe: target => {\n          var _a;\n          return (_a = get()) == null ? void 0 : _a.observe(target, {\n            box: \"border-box\"\n          });\n        },\n        unobserve: target => {\n          var _a;\n          return (_a = get()) == null ? void 0 : _a.unobserve(target);\n        }\n      };\n    })();\n    this.range = null;\n    this.setOptions = opts2 => {\n      Object.entries(opts2).forEach(_ref3 => {\n        let [key, value] = _ref3;\n        if (typeof value === \"undefined\") delete opts2[key];\n      });\n      this.options = {\n        debug: false,\n        initialOffset: 0,\n        overscan: 1,\n        paddingStart: 0,\n        paddingEnd: 0,\n        scrollPaddingStart: 0,\n        scrollPaddingEnd: 0,\n        horizontal: false,\n        getItemKey: defaultKeyExtractor,\n        rangeExtractor: defaultRangeExtractor,\n        onChange: () => {},\n        measureElement,\n        initialRect: {\n          width: 0,\n          height: 0\n        },\n        scrollMargin: 0,\n        gap: 0,\n        indexAttribute: \"data-index\",\n        initialMeasurementsCache: [],\n        lanes: 1,\n        isScrollingResetDelay: 150,\n        enabled: true,\n        ...opts2\n      };\n    };\n    this.notify = (force, sync) => {\n      var _a, _b;\n      const {\n        startIndex,\n        endIndex\n      } = this.range ?? {\n        startIndex: void 0,\n        endIndex: void 0\n      };\n      const range = this.calculateRange();\n      if (force || startIndex !== (range == null ? void 0 : range.startIndex) || endIndex !== (range == null ? void 0 : range.endIndex)) {\n        (_b = (_a = this.options).onChange) == null ? void 0 : _b.call(_a, this, sync);\n      }\n    };\n    this.cleanup = () => {\n      this.unsubs.filter(Boolean).forEach(d => d());\n      this.unsubs = [];\n      this.scrollElement = null;\n      this.targetWindow = null;\n      this.observer.disconnect();\n      this.elementsCache.clear();\n    };\n    this._didMount = () => {\n      return () => {\n        this.cleanup();\n      };\n    };\n    this._willUpdate = () => {\n      var _a;\n      const scrollElement = this.options.enabled ? this.options.getScrollElement() : null;\n      if (this.scrollElement !== scrollElement) {\n        this.cleanup();\n        if (!scrollElement) {\n          this.notify(false, false);\n          return;\n        }\n        this.scrollElement = scrollElement;\n        if (this.scrollElement && \"ownerDocument\" in this.scrollElement) {\n          this.targetWindow = this.scrollElement.ownerDocument.defaultView;\n        } else {\n          this.targetWindow = ((_a = this.scrollElement) == null ? void 0 : _a.window) ?? null;\n        }\n        this._scrollToOffset(this.getScrollOffset(), {\n          adjustments: void 0,\n          behavior: void 0\n        });\n        this.unsubs.push(this.options.observeElementRect(this, rect => {\n          this.scrollRect = rect;\n          this.notify(false, false);\n        }));\n        this.unsubs.push(this.options.observeElementOffset(this, (offset, isScrolling) => {\n          this.scrollAdjustments = 0;\n          this.scrollDirection = isScrolling ? this.getScrollOffset() < offset ? \"forward\" : \"backward\" : null;\n          this.scrollOffset = offset;\n          const prevIsScrolling = this.isScrolling;\n          this.isScrolling = isScrolling;\n          this.notify(prevIsScrolling !== isScrolling, isScrolling);\n        }));\n      }\n    };\n    this.getSize = () => {\n      if (!this.options.enabled) {\n        this.scrollRect = null;\n        return 0;\n      }\n      this.scrollRect = this.scrollRect ?? this.options.initialRect;\n      return this.scrollRect[this.options.horizontal ? \"width\" : \"height\"];\n    };\n    this.getScrollOffset = () => {\n      if (!this.options.enabled) {\n        this.scrollOffset = null;\n        return 0;\n      }\n      this.scrollOffset = this.scrollOffset ?? (typeof this.options.initialOffset === \"function\" ? this.options.initialOffset() : this.options.initialOffset);\n      return this.scrollOffset;\n    };\n    this.getFurthestMeasurement = (measurements, index) => {\n      const furthestMeasurementsFound = /* @__PURE__ */new Map();\n      const furthestMeasurements = /* @__PURE__ */new Map();\n      for (let m = index - 1; m >= 0; m--) {\n        const measurement = measurements[m];\n        if (furthestMeasurementsFound.has(measurement.lane)) {\n          continue;\n        }\n        const previousFurthestMeasurement = furthestMeasurements.get(measurement.lane);\n        if (previousFurthestMeasurement == null || measurement.end > previousFurthestMeasurement.end) {\n          furthestMeasurements.set(measurement.lane, measurement);\n        } else if (measurement.end < previousFurthestMeasurement.end) {\n          furthestMeasurementsFound.set(measurement.lane, true);\n        }\n        if (furthestMeasurementsFound.size === this.options.lanes) {\n          break;\n        }\n      }\n      return furthestMeasurements.size === this.options.lanes ? Array.from(furthestMeasurements.values()).sort((a, b) => {\n        if (a.end === b.end) {\n          return a.index - b.index;\n        }\n        return a.end - b.end;\n      })[0] : void 0;\n    };\n    this.getMeasurementOptions = memo(() => [this.options.count, this.options.paddingStart, this.options.scrollMargin, this.options.getItemKey, this.options.enabled], (count, paddingStart, scrollMargin, getItemKey, enabled) => {\n      this.pendingMeasuredCacheIndexes = [];\n      return {\n        count,\n        paddingStart,\n        scrollMargin,\n        getItemKey,\n        enabled\n      };\n    }, {\n      key: false\n    });\n    this.getMeasurements = memo(() => [this.getMeasurementOptions(), this.itemSizeCache], (_ref4, itemSizeCache) => {\n      let {\n        count,\n        paddingStart,\n        scrollMargin,\n        getItemKey,\n        enabled\n      } = _ref4;\n      var _a;\n      if (!enabled) {\n        this.measurementsCache = [];\n        this.itemSizeCache.clear();\n        return [];\n      }\n      if (this.measurementsCache.length === 0) {\n        this.measurementsCache = this.options.initialMeasurementsCache;\n        this.measurementsCache.forEach(item => {\n          this.itemSizeCache.set(item.key, item.size);\n        });\n      }\n      const min = this.pendingMeasuredCacheIndexes.length > 0 ? Math.min(...this.pendingMeasuredCacheIndexes) : 0;\n      this.pendingMeasuredCacheIndexes = [];\n      const measurements = this.measurementsCache.slice(0, min);\n      for (let i = min; i < count; i++) {\n        let measureElement2 = (_a = this.measurementsCache[i]) == null ? void 0 : _a.measureElement;\n        if (!measureElement2) {\n          measureElement2 = node => {\n            const key2 = getItemKey(i);\n            const prevNode = this.elementsCache.get(key2);\n            if (!node) {\n              if (prevNode) {\n                this.observer.unobserve(prevNode);\n                this.elementsCache.delete(key2);\n              }\n              return;\n            }\n            if (prevNode !== node) {\n              if (prevNode) {\n                this.observer.unobserve(prevNode);\n              }\n              this.observer.observe(node);\n              this.elementsCache.set(key2, node);\n            }\n            if (node.isConnected) {\n              this.resizeItem(i, this.options.measureElement(node, void 0, this));\n            }\n          };\n        }\n        const key = getItemKey(i);\n        const furthestMeasurement = this.options.lanes === 1 ? measurements[i - 1] : this.getFurthestMeasurement(measurements, i);\n        const start = furthestMeasurement ? furthestMeasurement.end + this.options.gap : paddingStart + scrollMargin;\n        const measuredSize = itemSizeCache.get(key);\n        const size = typeof measuredSize === \"number\" ? measuredSize : this.options.estimateSize(i);\n        const end = start + size;\n        const lane = furthestMeasurement ? furthestMeasurement.lane : i % this.options.lanes;\n        measurements[i] = {\n          index: i,\n          start,\n          size,\n          end,\n          key,\n          lane,\n          measureElement: measureElement2\n        };\n      }\n      this.measurementsCache = measurements;\n      return measurements;\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"getMeasurements\",\n      debug: () => this.options.debug\n    });\n    this.calculateRange = memo(() => [this.getMeasurements(), this.getSize(), this.getScrollOffset()], (measurements, outerSize, scrollOffset) => {\n      return this.range = measurements.length > 0 && outerSize > 0 ? calculateRange({\n        measurements,\n        outerSize,\n        scrollOffset\n      }) : null;\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"calculateRange\",\n      debug: () => this.options.debug\n    });\n    this.getIndexes = memo(() => [this.options.rangeExtractor, this.calculateRange(), this.options.overscan, this.options.count], (rangeExtractor, range, overscan, count) => {\n      return range === null ? [] : rangeExtractor({\n        startIndex: range.startIndex,\n        endIndex: range.endIndex,\n        overscan,\n        count\n      });\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"getIndexes\",\n      debug: () => this.options.debug\n    });\n    this.indexFromElement = node => {\n      const attributeName = this.options.indexAttribute;\n      const indexStr = node.getAttribute(attributeName);\n      if (!indexStr) {\n        console.warn(`Missing attribute name '${attributeName}={index}' on measured element.`);\n        return -1;\n      }\n      return parseInt(indexStr, 10);\n    };\n    this._measureElement = (node, entry) => {\n      const i = this.indexFromElement(node);\n      const item = this.getMeasurements()[i];\n      if (!item || !node.isConnected) {\n        this.elementsCache.forEach((cached, key) => {\n          if (cached === node) {\n            this.observer.unobserve(node);\n            this.elementsCache.delete(key);\n          }\n        });\n        return;\n      }\n      const prevNode = this.elementsCache.get(item.key);\n      if (prevNode !== node) {\n        if (prevNode) {\n          this.observer.unobserve(prevNode);\n        }\n        this.observer.observe(node);\n        this.elementsCache.set(item.key, node);\n      }\n      this.resizeItem(i, this.options.measureElement(node, entry, this));\n    };\n    this.resizeItem = (index, size) => {\n      const item = this.getMeasurements()[index];\n      if (!item) {\n        return;\n      }\n      const itemSize = this.itemSizeCache.get(item.key) ?? item.size;\n      const delta = size - itemSize;\n      if (delta !== 0) {\n        if (this.shouldAdjustScrollPositionOnItemSizeChange !== void 0 ? this.shouldAdjustScrollPositionOnItemSizeChange(item, delta, this) : item.start < this.getScrollOffset() + this.scrollAdjustments) {\n          if (process.env.NODE_ENV !== \"production\" && this.options.debug) {\n            console.info(\"correction\", delta);\n          }\n          this._scrollToOffset(this.getScrollOffset(), {\n            adjustments: this.scrollAdjustments += delta,\n            behavior: void 0\n          });\n        }\n        this.pendingMeasuredCacheIndexes.push(item.index);\n        this.itemSizeCache = new Map(this.itemSizeCache.set(item.key, size));\n        this.notify(true, false);\n      }\n    };\n    this.measureElement = node => {\n      if (!node) {\n        return;\n      }\n      this._measureElement(node, void 0);\n    };\n    this.getVirtualItems = memo(() => [this.getIndexes(), this.getMeasurements()], (indexes, measurements) => {\n      const virtualItems = [];\n      for (let k = 0, len = indexes.length; k < len; k++) {\n        const i = indexes[k];\n        const measurement = measurements[i];\n        virtualItems.push(measurement);\n      }\n      return virtualItems;\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"getVirtualItems\",\n      debug: () => this.options.debug\n    });\n    this.getVirtualItemForOffset = offset => {\n      const measurements = this.getMeasurements();\n      if (measurements.length === 0) {\n        return void 0;\n      }\n      return notUndefined(measurements[findNearestBinarySearch(0, measurements.length - 1, index => notUndefined(measurements[index]).start, offset)]);\n    };\n    this.getOffsetForAlignment = (toOffset, align) => {\n      const size = this.getSize();\n      const scrollOffset = this.getScrollOffset();\n      if (align === \"auto\") {\n        if (toOffset <= scrollOffset) {\n          align = \"start\";\n        } else if (toOffset >= scrollOffset + size) {\n          align = \"end\";\n        } else {\n          align = \"start\";\n        }\n      }\n      if (align === \"start\") {\n        toOffset = toOffset;\n      } else if (align === \"end\") {\n        toOffset = toOffset - size;\n      } else if (align === \"center\") {\n        toOffset = toOffset - size / 2;\n      }\n      const scrollSizeProp = this.options.horizontal ? \"scrollWidth\" : \"scrollHeight\";\n      const scrollSize = this.scrollElement ? \"document\" in this.scrollElement ? this.scrollElement.document.documentElement[scrollSizeProp] : this.scrollElement[scrollSizeProp] : 0;\n      const maxOffset = scrollSize - size;\n      return Math.max(Math.min(maxOffset, toOffset), 0);\n    };\n    this.getOffsetForIndex = function (index) {\n      let align = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"auto\";\n      index = Math.max(0, Math.min(index, _this.options.count - 1));\n      const item = _this.getMeasurements()[index];\n      if (!item) {\n        return void 0;\n      }\n      const size = _this.getSize();\n      const scrollOffset = _this.getScrollOffset();\n      if (align === \"auto\") {\n        if (item.end >= scrollOffset + size - _this.options.scrollPaddingEnd) {\n          align = \"end\";\n        } else if (item.start <= scrollOffset + _this.options.scrollPaddingStart) {\n          align = \"start\";\n        } else {\n          return [scrollOffset, align];\n        }\n      }\n      const toOffset = align === \"end\" ? item.end + _this.options.scrollPaddingEnd : item.start - _this.options.scrollPaddingStart;\n      return [_this.getOffsetForAlignment(toOffset, align), align];\n    };\n    this.isDynamicMode = () => this.elementsCache.size > 0;\n    this.cancelScrollToIndex = () => {\n      if (this.scrollToIndexTimeoutId !== null && this.targetWindow) {\n        this.targetWindow.clearTimeout(this.scrollToIndexTimeoutId);\n        this.scrollToIndexTimeoutId = null;\n      }\n    };\n    this.scrollToOffset = function (toOffset) {\n      let {\n        align = \"start\",\n        behavior\n      } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      _this.cancelScrollToIndex();\n      if (behavior === \"smooth\" && _this.isDynamicMode()) {\n        console.warn(\"The `smooth` scroll behavior is not fully supported with dynamic size.\");\n      }\n      _this._scrollToOffset(_this.getOffsetForAlignment(toOffset, align), {\n        adjustments: void 0,\n        behavior\n      });\n    };\n    this.scrollToIndex = function (index) {\n      let {\n        align: initialAlign = \"auto\",\n        behavior\n      } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      index = Math.max(0, Math.min(index, _this.options.count - 1));\n      _this.cancelScrollToIndex();\n      if (behavior === \"smooth\" && _this.isDynamicMode()) {\n        console.warn(\"The `smooth` scroll behavior is not fully supported with dynamic size.\");\n      }\n      const offsetAndAlign = _this.getOffsetForIndex(index, initialAlign);\n      if (!offsetAndAlign) return;\n      const [offset, align] = offsetAndAlign;\n      _this._scrollToOffset(offset, {\n        adjustments: void 0,\n        behavior\n      });\n      if (behavior !== \"smooth\" && _this.isDynamicMode() && _this.targetWindow) {\n        _this.scrollToIndexTimeoutId = _this.targetWindow.setTimeout(() => {\n          _this.scrollToIndexTimeoutId = null;\n          const elementInDOM = _this.elementsCache.has(_this.options.getItemKey(index));\n          if (elementInDOM) {\n            const [latestOffset] = notUndefined(_this.getOffsetForIndex(index, align));\n            if (!approxEqual(latestOffset, _this.getScrollOffset())) {\n              _this.scrollToIndex(index, {\n                align,\n                behavior\n              });\n            }\n          } else {\n            _this.scrollToIndex(index, {\n              align,\n              behavior\n            });\n          }\n        });\n      }\n    };\n    this.scrollBy = function (delta) {\n      let {\n        behavior\n      } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      _this.cancelScrollToIndex();\n      if (behavior === \"smooth\" && _this.isDynamicMode()) {\n        console.warn(\"The `smooth` scroll behavior is not fully supported with dynamic size.\");\n      }\n      _this._scrollToOffset(_this.getScrollOffset() + delta, {\n        adjustments: void 0,\n        behavior\n      });\n    };\n    this.getTotalSize = () => {\n      var _a;\n      const measurements = this.getMeasurements();\n      let end;\n      if (measurements.length === 0) {\n        end = this.options.paddingStart;\n      } else {\n        end = this.options.lanes === 1 ? ((_a = measurements[measurements.length - 1]) == null ? void 0 : _a.end) ?? 0 : Math.max(...measurements.slice(-this.options.lanes).map(m => m.end));\n      }\n      return end - this.options.scrollMargin + this.options.paddingEnd;\n    };\n    this._scrollToOffset = (offset, _ref5) => {\n      let {\n        adjustments,\n        behavior\n      } = _ref5;\n      this.options.scrollToFn(offset, {\n        behavior,\n        adjustments\n      }, this);\n    };\n    this.measure = () => {\n      var _a, _b;\n      this.itemSizeCache = /* @__PURE__ */new Map();\n      (_b = (_a = this.options).onChange) == null ? void 0 : _b.call(_a, this, false);\n    };\n    this.setOptions(opts);\n  }\n}\nconst findNearestBinarySearch = (low, high, getCurrentValue, value) => {\n  while (low <= high) {\n    const middle = (low + high) / 2 | 0;\n    const currentValue = getCurrentValue(middle);\n    if (currentValue < value) {\n      low = middle + 1;\n    } else if (currentValue > value) {\n      high = middle - 1;\n    } else {\n      return middle;\n    }\n  }\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\nfunction calculateRange(_ref6) {\n  let {\n    measurements,\n    outerSize,\n    scrollOffset\n  } = _ref6;\n  const count = measurements.length - 1;\n  const getOffset = index => measurements[index].start;\n  const startIndex = findNearestBinarySearch(0, count, getOffset, scrollOffset);\n  let endIndex = startIndex;\n  while (endIndex < count && measurements[endIndex].end < scrollOffset + outerSize) {\n    endIndex++;\n  }\n  return {\n    startIndex,\n    endIndex\n  };\n}\nexport { Virtualizer, approxEqual, debounce, defaultKeyExtractor, defaultRangeExtractor, elementScroll, measureElement, memo, notUndefined, observeElementOffset, observeElementRect, observeWindowOffset, observeWindowRect, windowScroll };","map":{"version":3,"names":["defaultKeyExtractor","index","defaultRangeExtractor","range","start","Math","max","startIndex","overscan","end","min","endIndex","count","arr","i","push","observeElementRect","instance","cb","element","scrollElement","targetWindow","handler","rect","width","height","round","getBoundingClientRect","ResizeObserver","observer","entries","entry","borderBoxSize","box","inlineSize","blockSize","observe","unobserve","addEventListenerOptions","passive","observeWindowRect","innerWidth","innerHeight","addEventListener","removeEventListener","supportsScrollend","window","observeElementOffset","offset","fallback","debounce","options","isScrollingResetDelay","createHandler","isScrolling","horizontal","endHandler","observeWindowOffset","measureElement","size","windowScroll","_ref","adjustments","behavior","toOffset","_b","_a","scrollTo","call","elementScroll","_ref2","Virtualizer","constructor","opts","_this","unsubs","scrollToIndexTimeoutId","measurementsCache","itemSizeCache","Map","pendingMeasuredCacheIndexes","scrollRect","scrollOffset","scrollDirection","scrollAdjustments","elementsCache","_ro","get","forEach","_measureElement","target","disconnect","setOptions","opts2","Object","_ref3","key","value","debug","initialOffset","paddingStart","paddingEnd","scrollPaddingStart","scrollPaddingEnd","getItemKey","rangeExtractor","onChange","initialRect","scrollMargin","gap","indexAttribute","initialMeasurementsCache","lanes","enabled","notify","force","sync","calculateRange","cleanup","filter","Boolean","d","clear","_didMount","_willUpdate","getScrollElement","ownerDocument","defaultView","_scrollToOffset","getScrollOffset","prevIsScrolling","getSize","getFurthestMeasurement","measurements","furthestMeasurementsFound","furthestMeasurements","m","measurement","has","lane","previousFurthestMeasurement","set","Array","from","values","sort","a","b","getMeasurementOptions","memo","getMeasurements","_ref4","length","item","slice","measureElement2","node","key2","prevNode","delete","isConnected","resizeItem","furthestMeasurement","measuredSize","estimateSize","process","env","NODE_ENV","outerSize","getIndexes","indexFromElement","attributeName","indexStr","getAttribute","console","warn","parseInt","cached","itemSize","delta","shouldAdjustScrollPositionOnItemSizeChange","info","getVirtualItems","indexes","virtualItems","k","len","getVirtualItemForOffset","notUndefined","findNearestBinarySearch","getOffsetForAlignment","align","scrollSizeProp","scrollSize","document","documentElement","maxOffset","getOffsetForIndex","arguments","undefined","isDynamicMode","cancelScrollToIndex","clearTimeout","scrollToOffset","scrollToIndex","initialAlign","offsetAndAlign","setTimeout","elementInDOM","latestOffset","approxEqual","scrollBy","getTotalSize","map","_ref5","scrollToFn","measure","low","high","getCurrentValue","middle","currentValue","_ref6","getOffset"],"sources":["/Users/manav/Documents/Projects/steel-website/steel-website/node_modules/@tanstack/virtual-core/src/index.ts"],"sourcesContent":["import { approxEqual, debounce, memo, notUndefined } from './utils'\n\nexport * from './utils'\n\n//\n\ntype ScrollDirection = 'forward' | 'backward'\n\ntype ScrollAlignment = 'start' | 'center' | 'end' | 'auto'\n\ntype ScrollBehavior = 'auto' | 'smooth'\n\nexport interface ScrollToOptions {\n  align?: ScrollAlignment\n  behavior?: ScrollBehavior\n}\n\ntype ScrollToOffsetOptions = ScrollToOptions\n\ntype ScrollToIndexOptions = ScrollToOptions\n\nexport interface Range {\n  startIndex: number\n  endIndex: number\n  overscan: number\n  count: number\n}\n\ntype Key = number | string\n\nexport interface VirtualItem<TItemElement extends Element> {\n  key: Key\n  index: number\n  start: number\n  end: number\n  size: number\n  lane: number\n  measureElement: (node: TItemElement | null | undefined) => void\n}\n\nexport interface Rect {\n  width: number\n  height: number\n}\n\n//\n\nexport const defaultKeyExtractor = (index: number) => index\n\nexport const defaultRangeExtractor = (range: Range) => {\n  const start = Math.max(range.startIndex - range.overscan, 0)\n  const end = Math.min(range.endIndex + range.overscan, range.count - 1)\n\n  const arr = []\n\n  for (let i = start; i <= end; i++) {\n    arr.push(i)\n  }\n\n  return arr\n}\n\nexport const observeElementRect = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n  const targetWindow = instance.targetWindow\n  if (!targetWindow) {\n    return\n  }\n\n  const handler = (rect: Rect) => {\n    const { width, height } = rect\n    cb({ width: Math.round(width), height: Math.round(height) })\n  }\n\n  handler(element.getBoundingClientRect())\n\n  if (!targetWindow.ResizeObserver) {\n    return () => {}\n  }\n\n  const observer = new targetWindow.ResizeObserver((entries) => {\n    const entry = entries[0]\n    if (entry?.borderBoxSize) {\n      const box = entry.borderBoxSize[0]\n      if (box) {\n        handler({ width: box.inlineSize, height: box.blockSize })\n        return\n      }\n    }\n    handler(element.getBoundingClientRect())\n  })\n\n  observer.observe(element, { box: 'border-box' })\n\n  return () => {\n    observer.unobserve(element)\n  }\n}\n\nconst addEventListenerOptions = {\n  passive: true,\n}\n\nexport const observeWindowRect = (\n  instance: Virtualizer<Window, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb({ width: element.innerWidth, height: element.innerHeight })\n  }\n  handler()\n\n  element.addEventListener('resize', handler, addEventListenerOptions)\n\n  return () => {\n    element.removeEventListener('resize', handler)\n  }\n}\n\nconst supportsScrollend =\n  typeof window == 'undefined' ? true : 'onscrollend' in window\n\nexport const observeElementOffset = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: (offset: number, isScrolling: boolean) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n  const targetWindow = instance.targetWindow\n  if (!targetWindow) {\n    return\n  }\n\n  let offset = 0\n  const fallback = supportsScrollend\n    ? () => undefined\n    : debounce(\n        targetWindow,\n        () => {\n          cb(offset, false)\n        },\n        instance.options.isScrollingResetDelay,\n      )\n\n  const createHandler = (isScrolling: boolean) => () => {\n    offset = element[instance.options.horizontal ? 'scrollLeft' : 'scrollTop']\n    fallback()\n    cb(offset, isScrolling)\n  }\n  const handler = createHandler(true)\n  const endHandler = createHandler(false)\n  endHandler()\n\n  element.addEventListener('scroll', handler, addEventListenerOptions)\n  element.addEventListener('scrollend', endHandler, addEventListenerOptions)\n\n  return () => {\n    element.removeEventListener('scroll', handler)\n    element.removeEventListener('scrollend', endHandler)\n  }\n}\n\nexport const observeWindowOffset = (\n  instance: Virtualizer<Window, any>,\n  cb: (offset: number, isScrolling: boolean) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n  const targetWindow = instance.targetWindow\n  if (!targetWindow) {\n    return\n  }\n\n  let offset = 0\n  const fallback = supportsScrollend\n    ? () => undefined\n    : debounce(\n        targetWindow,\n        () => {\n          cb(offset, false)\n        },\n        instance.options.isScrollingResetDelay,\n      )\n\n  const createHandler = (isScrolling: boolean) => () => {\n    offset = element[instance.options.horizontal ? 'scrollX' : 'scrollY']\n    fallback()\n    cb(offset, isScrolling)\n  }\n  const handler = createHandler(true)\n  const endHandler = createHandler(false)\n  endHandler()\n\n  element.addEventListener('scroll', handler, addEventListenerOptions)\n  element.addEventListener('scrollend', endHandler, addEventListenerOptions)\n\n  return () => {\n    element.removeEventListener('scroll', handler)\n    element.removeEventListener('scrollend', endHandler)\n  }\n}\n\nexport const measureElement = <TItemElement extends Element>(\n  element: TItemElement,\n  entry: ResizeObserverEntry | undefined,\n  instance: Virtualizer<any, TItemElement>,\n) => {\n  if (entry?.borderBoxSize) {\n    const box = entry.borderBoxSize[0]\n    if (box) {\n      const size = Math.round(\n        box[instance.options.horizontal ? 'inlineSize' : 'blockSize'],\n      )\n      return size\n    }\n  }\n  return Math.round(\n    element.getBoundingClientRect()[\n      instance.options.horizontal ? 'width' : 'height'\n    ],\n  )\n}\n\nexport const windowScroll = <T extends Window>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport const elementScroll = <T extends Element>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport interface VirtualizerOptions<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  // Required from the user\n  count: number\n  getScrollElement: () => TScrollElement | null\n  estimateSize: (index: number) => number\n\n  // Required from the framework adapter (but can be overridden)\n  scrollToFn: (\n    offset: number,\n    options: { adjustments?: number; behavior?: ScrollBehavior },\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => void\n  observeElementRect: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (rect: Rect) => void,\n  ) => void | (() => void)\n  observeElementOffset: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (offset: number, isScrolling: boolean) => void,\n  ) => void | (() => void)\n\n  // Optional\n  debug?: any\n  initialRect?: Rect\n  onChange?: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    sync: boolean,\n  ) => void\n  measureElement?: (\n    element: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => number\n  overscan?: number\n  horizontal?: boolean\n  paddingStart?: number\n  paddingEnd?: number\n  scrollPaddingStart?: number\n  scrollPaddingEnd?: number\n  initialOffset?: number | (() => number)\n  getItemKey?: (index: number) => Key\n  rangeExtractor?: (range: Range) => Array<number>\n  scrollMargin?: number\n  gap?: number\n  indexAttribute?: string\n  initialMeasurementsCache?: Array<VirtualItem<TItemElement>>\n  lanes?: number\n  isScrollingResetDelay?: number\n  enabled?: boolean\n}\n\nexport class Virtualizer<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  private unsubs: Array<void | (() => void)> = []\n  options!: Required<VirtualizerOptions<TScrollElement, TItemElement>>\n  scrollElement: TScrollElement | null = null\n  targetWindow: (Window & typeof globalThis) | null = null\n  isScrolling = false\n  private scrollToIndexTimeoutId: number | null = null\n  measurementsCache: Array<VirtualItem<TItemElement>> = []\n  private itemSizeCache = new Map<Key, number>()\n  private pendingMeasuredCacheIndexes: Array<number> = []\n  scrollRect: Rect | null = null\n  scrollOffset: number | null = null\n  scrollDirection: ScrollDirection | null = null\n  private scrollAdjustments = 0\n  shouldAdjustScrollPositionOnItemSizeChange:\n    | undefined\n    | ((\n        item: VirtualItem<TItemElement>,\n        delta: number,\n        instance: Virtualizer<TScrollElement, TItemElement>,\n      ) => boolean)\n  elementsCache = new Map<Key, TItemElement>()\n  private observer = (() => {\n    let _ro: ResizeObserver | null = null\n\n    const get = () => {\n      if (_ro) {\n        return _ro\n      }\n\n      if (!this.targetWindow || !this.targetWindow.ResizeObserver) {\n        return null\n      }\n\n      return (_ro = new this.targetWindow.ResizeObserver((entries) => {\n        entries.forEach((entry) => {\n          this._measureElement(entry.target as TItemElement, entry)\n        })\n      }))\n    }\n\n    return {\n      disconnect: () => get()?.disconnect(),\n      observe: (target: Element) =>\n        get()?.observe(target, { box: 'border-box' }),\n      unobserve: (target: Element) => get()?.unobserve(target),\n    }\n  })()\n  range: { startIndex: number; endIndex: number } | null = null\n\n  constructor(opts: VirtualizerOptions<TScrollElement, TItemElement>) {\n    this.setOptions(opts)\n  }\n\n  setOptions = (opts: VirtualizerOptions<TScrollElement, TItemElement>) => {\n    Object.entries(opts).forEach(([key, value]) => {\n      if (typeof value === 'undefined') delete (opts as any)[key]\n    })\n\n    this.options = {\n      debug: false,\n      initialOffset: 0,\n      overscan: 1,\n      paddingStart: 0,\n      paddingEnd: 0,\n      scrollPaddingStart: 0,\n      scrollPaddingEnd: 0,\n      horizontal: false,\n      getItemKey: defaultKeyExtractor,\n      rangeExtractor: defaultRangeExtractor,\n      onChange: () => {},\n      measureElement,\n      initialRect: { width: 0, height: 0 },\n      scrollMargin: 0,\n      gap: 0,\n      indexAttribute: 'data-index',\n      initialMeasurementsCache: [],\n      lanes: 1,\n      isScrollingResetDelay: 150,\n      enabled: true,\n      ...opts,\n    }\n  }\n\n  private notify = (force: boolean, sync: boolean) => {\n    const { startIndex, endIndex } = this.range ?? {\n      startIndex: undefined,\n      endIndex: undefined,\n    }\n    const range = this.calculateRange()\n\n    if (\n      force ||\n      startIndex !== range?.startIndex ||\n      endIndex !== range?.endIndex\n    ) {\n      this.options.onChange?.(this, sync)\n    }\n  }\n\n  private cleanup = () => {\n    this.unsubs.filter(Boolean).forEach((d) => d!())\n    this.unsubs = []\n    this.scrollElement = null\n    this.targetWindow = null\n    this.observer.disconnect()\n    this.elementsCache.clear()\n  }\n\n  _didMount = () => {\n    return () => {\n      this.cleanup()\n    }\n  }\n\n  _willUpdate = () => {\n    const scrollElement = this.options.enabled\n      ? this.options.getScrollElement()\n      : null\n\n    if (this.scrollElement !== scrollElement) {\n      this.cleanup()\n\n      if (!scrollElement) {\n        this.notify(false, false)\n        return\n      }\n\n      this.scrollElement = scrollElement\n\n      if (this.scrollElement && 'ownerDocument' in this.scrollElement) {\n        this.targetWindow = this.scrollElement.ownerDocument.defaultView\n      } else {\n        this.targetWindow = this.scrollElement?.window ?? null\n      }\n\n      this._scrollToOffset(this.getScrollOffset(), {\n        adjustments: undefined,\n        behavior: undefined,\n      })\n\n      this.unsubs.push(\n        this.options.observeElementRect(this, (rect) => {\n          this.scrollRect = rect\n          this.notify(false, false)\n        }),\n      )\n\n      this.unsubs.push(\n        this.options.observeElementOffset(this, (offset, isScrolling) => {\n          this.scrollAdjustments = 0\n          this.scrollDirection = isScrolling\n            ? this.getScrollOffset() < offset\n              ? 'forward'\n              : 'backward'\n            : null\n          this.scrollOffset = offset\n\n          const prevIsScrolling = this.isScrolling\n          this.isScrolling = isScrolling\n\n          this.notify(prevIsScrolling !== isScrolling, isScrolling)\n        }),\n      )\n    }\n  }\n\n  private getSize = () => {\n    if (!this.options.enabled) {\n      this.scrollRect = null\n      return 0\n    }\n\n    this.scrollRect = this.scrollRect ?? this.options.initialRect\n\n    return this.scrollRect[this.options.horizontal ? 'width' : 'height']\n  }\n\n  private getScrollOffset = () => {\n    if (!this.options.enabled) {\n      this.scrollOffset = null\n      return 0\n    }\n\n    this.scrollOffset =\n      this.scrollOffset ??\n      (typeof this.options.initialOffset === 'function'\n        ? this.options.initialOffset()\n        : this.options.initialOffset)\n\n    return this.scrollOffset\n  }\n\n  private getFurthestMeasurement = (\n    measurements: Array<VirtualItem<TItemElement>>,\n    index: number,\n  ) => {\n    const furthestMeasurementsFound = new Map<number, true>()\n    const furthestMeasurements = new Map<number, VirtualItem<TItemElement>>()\n    for (let m = index - 1; m >= 0; m--) {\n      const measurement = measurements[m]!\n\n      if (furthestMeasurementsFound.has(measurement.lane)) {\n        continue\n      }\n\n      const previousFurthestMeasurement = furthestMeasurements.get(\n        measurement.lane,\n      )\n      if (\n        previousFurthestMeasurement == null ||\n        measurement.end > previousFurthestMeasurement.end\n      ) {\n        furthestMeasurements.set(measurement.lane, measurement)\n      } else if (measurement.end < previousFurthestMeasurement.end) {\n        furthestMeasurementsFound.set(measurement.lane, true)\n      }\n\n      if (furthestMeasurementsFound.size === this.options.lanes) {\n        break\n      }\n    }\n\n    return furthestMeasurements.size === this.options.lanes\n      ? Array.from(furthestMeasurements.values()).sort((a, b) => {\n          if (a.end === b.end) {\n            return a.index - b.index\n          }\n\n          return a.end - b.end\n        })[0]\n      : undefined\n  }\n\n  private getMeasurementOptions = memo(\n    () => [\n      this.options.count,\n      this.options.paddingStart,\n      this.options.scrollMargin,\n      this.options.getItemKey,\n      this.options.enabled,\n    ],\n    (count, paddingStart, scrollMargin, getItemKey, enabled) => {\n      this.pendingMeasuredCacheIndexes = []\n      return {\n        count,\n        paddingStart,\n        scrollMargin,\n        getItemKey,\n        enabled,\n      }\n    },\n    {\n      key: false,\n    },\n  )\n\n  private getMeasurements = memo(\n    () => [this.getMeasurementOptions(), this.itemSizeCache],\n    (\n      { count, paddingStart, scrollMargin, getItemKey, enabled },\n      itemSizeCache,\n    ) => {\n      if (!enabled) {\n        this.measurementsCache = []\n        this.itemSizeCache.clear()\n        return []\n      }\n\n      if (this.measurementsCache.length === 0) {\n        this.measurementsCache = this.options.initialMeasurementsCache\n        this.measurementsCache.forEach((item) => {\n          this.itemSizeCache.set(item.key, item.size)\n        })\n      }\n\n      const min =\n        this.pendingMeasuredCacheIndexes.length > 0\n          ? Math.min(...this.pendingMeasuredCacheIndexes)\n          : 0\n      this.pendingMeasuredCacheIndexes = []\n\n      const measurements = this.measurementsCache.slice(0, min)\n\n      for (let i = min; i < count; i++) {\n        let measureElement = this.measurementsCache[i]?.measureElement\n\n        if (!measureElement) {\n          measureElement = (node: TItemElement | null | undefined) => {\n            const key = getItemKey(i)\n            const prevNode = this.elementsCache.get(key)\n\n            if (!node) {\n              if (prevNode) {\n                this.observer.unobserve(prevNode)\n                this.elementsCache.delete(key)\n              }\n              return\n            }\n\n            if (prevNode !== node) {\n              if (prevNode) {\n                this.observer.unobserve(prevNode)\n              }\n              this.observer.observe(node)\n              this.elementsCache.set(key, node)\n            }\n\n            if (node.isConnected) {\n              this.resizeItem(\n                i,\n                this.options.measureElement(node, undefined, this),\n              )\n            }\n          }\n        }\n\n        const key = getItemKey(i)\n\n        const furthestMeasurement =\n          this.options.lanes === 1\n            ? measurements[i - 1]\n            : this.getFurthestMeasurement(measurements, i)\n\n        const start = furthestMeasurement\n          ? furthestMeasurement.end + this.options.gap\n          : paddingStart + scrollMargin\n\n        const measuredSize = itemSizeCache.get(key)\n        const size =\n          typeof measuredSize === 'number'\n            ? measuredSize\n            : this.options.estimateSize(i)\n\n        const end = start + size\n\n        const lane = furthestMeasurement\n          ? furthestMeasurement.lane\n          : i % this.options.lanes\n\n        measurements[i] = {\n          index: i,\n          start,\n          size,\n          end,\n          key,\n          lane,\n          measureElement,\n        }\n      }\n\n      this.measurementsCache = measurements\n\n      return measurements\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getMeasurements',\n      debug: () => this.options.debug,\n    },\n  )\n\n  calculateRange = memo(\n    () => [this.getMeasurements(), this.getSize(), this.getScrollOffset()],\n    (measurements, outerSize, scrollOffset) => {\n      return (this.range =\n        measurements.length > 0 && outerSize > 0\n          ? calculateRange({\n              measurements,\n              outerSize,\n              scrollOffset,\n            })\n          : null)\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'calculateRange',\n      debug: () => this.options.debug,\n    },\n  )\n\n  private getIndexes = memo(\n    () => [\n      this.options.rangeExtractor,\n      this.calculateRange(),\n      this.options.overscan,\n      this.options.count,\n    ],\n    (rangeExtractor, range, overscan, count) => {\n      return range === null\n        ? []\n        : rangeExtractor({\n            startIndex: range.startIndex,\n            endIndex: range.endIndex,\n            overscan,\n            count,\n          })\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  indexFromElement = (node: TItemElement) => {\n    const attributeName = this.options.indexAttribute\n    const indexStr = node.getAttribute(attributeName)\n\n    if (!indexStr) {\n      console.warn(\n        `Missing attribute name '${attributeName}={index}' on measured element.`,\n      )\n      return -1\n    }\n\n    return parseInt(indexStr, 10)\n  }\n\n  private _measureElement = (\n    node: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n  ) => {\n    const i = this.indexFromElement(node)\n    const item = this.getMeasurements()[i]\n\n    if (!item || !node.isConnected) {\n      this.elementsCache.forEach((cached, key) => {\n        if (cached === node) {\n          this.observer.unobserve(node)\n          this.elementsCache.delete(key)\n        }\n      })\n      return\n    }\n\n    const prevNode = this.elementsCache.get(item.key)\n\n    if (prevNode !== node) {\n      if (prevNode) {\n        this.observer.unobserve(prevNode)\n      }\n      this.observer.observe(node)\n      this.elementsCache.set(item.key, node)\n    }\n\n    this.resizeItem(i, this.options.measureElement(node, entry, this))\n  }\n\n  resizeItem = (index: number, size: number) => {\n    const item = this.getMeasurements()[index]\n    if (!item) {\n      return\n    }\n    const itemSize = this.itemSizeCache.get(item.key) ?? item.size\n    const delta = size - itemSize\n\n    if (delta !== 0) {\n      if (\n        this.shouldAdjustScrollPositionOnItemSizeChange !== undefined\n          ? this.shouldAdjustScrollPositionOnItemSizeChange(item, delta, this)\n          : item.start < this.getScrollOffset() + this.scrollAdjustments\n      ) {\n        if (process.env.NODE_ENV !== 'production' && this.options.debug) {\n          console.info('correction', delta)\n        }\n\n        this._scrollToOffset(this.getScrollOffset(), {\n          adjustments: (this.scrollAdjustments += delta),\n          behavior: undefined,\n        })\n      }\n\n      this.pendingMeasuredCacheIndexes.push(item.index)\n      this.itemSizeCache = new Map(this.itemSizeCache.set(item.key, size))\n\n      this.notify(true, false)\n    }\n  }\n\n  measureElement = (node: TItemElement | null | undefined) => {\n    if (!node) {\n      return\n    }\n\n    this._measureElement(node, undefined)\n  }\n\n  getVirtualItems = memo(\n    () => [this.getIndexes(), this.getMeasurements()],\n    (indexes, measurements) => {\n      const virtualItems: Array<VirtualItem<TItemElement>> = []\n\n      for (let k = 0, len = indexes.length; k < len; k++) {\n        const i = indexes[k]!\n        const measurement = measurements[i]!\n\n        virtualItems.push(measurement)\n      }\n\n      return virtualItems\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getVirtualItems',\n      debug: () => this.options.debug,\n    },\n  )\n\n  getVirtualItemForOffset = (offset: number) => {\n    const measurements = this.getMeasurements()\n    if (measurements.length === 0) {\n      return undefined\n    }\n    return notUndefined(\n      measurements[\n        findNearestBinarySearch(\n          0,\n          measurements.length - 1,\n          (index: number) => notUndefined(measurements[index]).start,\n          offset,\n        )\n      ],\n    )\n  }\n\n  getOffsetForAlignment = (toOffset: number, align: ScrollAlignment) => {\n    const size = this.getSize()\n    const scrollOffset = this.getScrollOffset()\n\n    if (align === 'auto') {\n      if (toOffset <= scrollOffset) {\n        align = 'start'\n      } else if (toOffset >= scrollOffset + size) {\n        align = 'end'\n      } else {\n        align = 'start'\n      }\n    }\n\n    if (align === 'start') {\n      toOffset = toOffset\n    } else if (align === 'end') {\n      toOffset = toOffset - size\n    } else if (align === 'center') {\n      toOffset = toOffset - size / 2\n    }\n\n    const scrollSizeProp = this.options.horizontal\n      ? 'scrollWidth'\n      : 'scrollHeight'\n    const scrollSize = this.scrollElement\n      ? 'document' in this.scrollElement\n        ? this.scrollElement.document.documentElement[scrollSizeProp]\n        : this.scrollElement[scrollSizeProp]\n      : 0\n\n    const maxOffset = scrollSize - size\n\n    return Math.max(Math.min(maxOffset, toOffset), 0)\n  }\n\n  getOffsetForIndex = (index: number, align: ScrollAlignment = 'auto') => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    const item = this.getMeasurements()[index]\n    if (!item) {\n      return undefined\n    }\n\n    const size = this.getSize()\n    const scrollOffset = this.getScrollOffset()\n\n    if (align === 'auto') {\n      if (item.end >= scrollOffset + size - this.options.scrollPaddingEnd) {\n        align = 'end'\n      } else if (item.start <= scrollOffset + this.options.scrollPaddingStart) {\n        align = 'start'\n      } else {\n        return [scrollOffset, align] as const\n      }\n    }\n\n    const toOffset =\n      align === 'end'\n        ? item.end + this.options.scrollPaddingEnd\n        : item.start - this.options.scrollPaddingStart\n\n    return [this.getOffsetForAlignment(toOffset, align), align] as const\n  }\n\n  private isDynamicMode = () => this.elementsCache.size > 0\n\n  private cancelScrollToIndex = () => {\n    if (this.scrollToIndexTimeoutId !== null && this.targetWindow) {\n      this.targetWindow.clearTimeout(this.scrollToIndexTimeoutId)\n      this.scrollToIndexTimeoutId = null\n    }\n  }\n\n  scrollToOffset = (\n    toOffset: number,\n    { align = 'start', behavior }: ScrollToOffsetOptions = {},\n  ) => {\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.getOffsetForAlignment(toOffset, align), {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  scrollToIndex = (\n    index: number,\n    { align: initialAlign = 'auto', behavior }: ScrollToIndexOptions = {},\n  ) => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    const offsetAndAlign = this.getOffsetForIndex(index, initialAlign)\n    if (!offsetAndAlign) return\n\n    const [offset, align] = offsetAndAlign\n\n    this._scrollToOffset(offset, { adjustments: undefined, behavior })\n\n    if (behavior !== 'smooth' && this.isDynamicMode() && this.targetWindow) {\n      this.scrollToIndexTimeoutId = this.targetWindow.setTimeout(() => {\n        this.scrollToIndexTimeoutId = null\n\n        const elementInDOM = this.elementsCache.has(\n          this.options.getItemKey(index),\n        )\n\n        if (elementInDOM) {\n          const [latestOffset] = notUndefined(\n            this.getOffsetForIndex(index, align),\n          )\n\n          if (!approxEqual(latestOffset, this.getScrollOffset())) {\n            this.scrollToIndex(index, { align, behavior })\n          }\n        } else {\n          this.scrollToIndex(index, { align, behavior })\n        }\n      })\n    }\n  }\n\n  scrollBy = (delta: number, { behavior }: ScrollToOffsetOptions = {}) => {\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.getScrollOffset() + delta, {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  getTotalSize = () => {\n    const measurements = this.getMeasurements()\n\n    let end: number\n    // If there are no measurements, set the end to paddingStart\n    if (measurements.length === 0) {\n      end = this.options.paddingStart\n    } else {\n      // If lanes is 1, use the last measurement's end, otherwise find the maximum end value among all measurements\n      end =\n        this.options.lanes === 1\n          ? (measurements[measurements.length - 1]?.end ?? 0)\n          : Math.max(\n              ...measurements.slice(-this.options.lanes).map((m) => m.end),\n            )\n    }\n\n    return end - this.options.scrollMargin + this.options.paddingEnd\n  }\n\n  private _scrollToOffset = (\n    offset: number,\n    {\n      adjustments,\n      behavior,\n    }: {\n      adjustments: number | undefined\n      behavior: ScrollBehavior | undefined\n    },\n  ) => {\n    this.options.scrollToFn(offset, { behavior, adjustments }, this)\n  }\n\n  measure = () => {\n    this.itemSizeCache = new Map()\n    this.options.onChange?.(this, false)\n  }\n}\n\nconst findNearestBinarySearch = (\n  low: number,\n  high: number,\n  getCurrentValue: (i: number) => number,\n  value: number,\n) => {\n  while (low <= high) {\n    const middle = ((low + high) / 2) | 0\n    const currentValue = getCurrentValue(middle)\n\n    if (currentValue < value) {\n      low = middle + 1\n    } else if (currentValue > value) {\n      high = middle - 1\n    } else {\n      return middle\n    }\n  }\n\n  if (low > 0) {\n    return low - 1\n  } else {\n    return 0\n  }\n}\n\nfunction calculateRange<TItemElement extends Element>({\n  measurements,\n  outerSize,\n  scrollOffset,\n}: {\n  measurements: Array<VirtualItem<TItemElement>>\n  outerSize: number\n  scrollOffset: number\n}) {\n  const count = measurements.length - 1\n  const getOffset = (index: number) => measurements[index]!.start\n\n  const startIndex = findNearestBinarySearch(0, count, getOffset, scrollOffset)\n  let endIndex = startIndex\n\n  while (\n    endIndex < count &&\n    measurements[endIndex]!.end < scrollOffset + outerSize\n  ) {\n    endIndex++\n  }\n\n  return { startIndex, endIndex }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}